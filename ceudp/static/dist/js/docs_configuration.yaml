swagger: "2.0"
info:
  version: "1.0.0"
  title: "统一数据平台接口文档"

schemes:
  - "http"
host: "localhost:8000"
basePath: "/"

tags:
  - name: "用户认证"
  - name: "用户管理"
  - name: "用户组管理"
  - name: "权限管理"

paths:
  # 用户认证
  /api/management/login/:
    post:
      tags:
        - "用户认证"
      summary: "获取用户认证信息（Token）"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: formData
          description: "用户账号"
          required: true
          type: string
        - name: "password"
          in: formData
          format: "password"
          description: "用户密码"
          required: true
          type: string
      responses:
        200:
          description: "用户获取Token成功"
        400:
          description: "用户获取Token失败"
        404:
          description: "页面没有找到"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"

  /api/management/users/:
    # 用户列表
    get: 
      tags:
        - "用户管理"
      summary: "获取用户列表"
      responses:
        200:
          description: "获取用户列表成功"
          schema:
              $ref: "#/definitions/User"
        400:
          description: "获取用户列表失败"
        404:
          description: "用户没有找到"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
      security:
        - userToken: []

    # 创建用户
    post:
      tags:
        - "用户管理"
      summary: "创建用户"
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - user:
          in: body
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "创建用户成功"
          schema:
              $ref: "#/definitions/User"
        400:
          description: "获取用户列表失败"
        404:
          description: "用户没有找到"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
      security:
        - userToken: []

  /api/management/users/{id}:
    # 获取某个用户
    get: 
      tags:
        - "用户管理"
      summary: "获取某个用户"
      parameters:
        - name: "id"
          in: path
          description: "用户ID"
          required: true
          type: integer
      responses:
        200:
          description: "获取用户列表成功"
          schema:
              $ref: "#/definitions/User"
        400:
          description: "获取用户列表失败"
        404:
          description: "用户没有找到"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
      security:
        - userToken: []

  /api/management/users/{id}/change_password/:
    # 修改密码
    post:
      tags:
        - "用户管理"
      summary: "修改密码"
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "id"
          in: path
          description: "用户ID"
          required: true
          type: integer
        - name: "password"
          in: formData
          format: "password"
          description: "用户密码"
          required: true
          type: string
      responses:
        200:
          description: "修改密码成功"
        400:
          description: "修改密码失败"
        404:
          description: "用户没有找到"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
      security:
        - userToken: []

  # /api/management/users/{id}/:
  #   # 修改用户
  #   put:
  #     tags:
  #       - "用户管理"
  #     summary: "修改用户"
  #     consumes:
  #       - "application/x-www-form-urlencoded"
  #     parameters:

  #       - name: "id"
  #         in: path
  #         description: "用户ID"
  #         required: true
  #         type: integer
  #       - name: "username"
  #         in: formData
  #         description: "用户账号"
  #         required: true
  #         type: string
  #       - name: "email"
  #         in: formData
  #         description: "邮箱"
  #         type: string
  #       - name: "verbose_name"
  #         in: formData
  #         description: "显示名称"
  #         required: true
  #         type: string
  #       - name: "groups"
  #         in: formData
  #         description: "用户组（[user_group_ids]）"
  #         type: array
  #         items:
  #           type: integer
  #       - name: "user_permissions"
  #         in: formData
  #         description: "用户权限（[user_permissions_ids]）"
  #         type: array
  #         items:
  #           type: integer
  #     responses:
  #       201:
  #         description: "创建用户成功"
  #         schema:
  #             $ref: "#/definitions/User"
  #       400:
  #         description: "获取用户列表失败"
  #       404:
  #         description: "用户没有找到"
  #       403:
  #         $ref: "#/responses/Standard403ErrorResponse"
  #       500:
  #         $ref: "#/responses/Standard500ErrorResponse"
  #     security:
  #       - userToken: []

  /api/management/groups/:
    # 获取用户组列表
    get: 
      tags:
        - "用户组管理"
      summary: "获取用户组列表"
      responses:
        200:
          description: "获取用户组列表成功"
          schema:
              $ref: "#/definitions/UserGroup"
        400:
          description: "获取用户组列表失败"
        404:
          description: "用户组没有找到"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
      security:
        - userToken: []

    # 创建用户组
    post:
      tags:
        - "用户组管理"
      summary: "创建用户组"
      parameters:
        - group:
          in: body
          description: "创建用户组参数，其中 `permissions` 为权限参数，若没有请设置为 `[]` 。"
          schema:
            $ref: "#/definitions/CreateGroup"
      responses:
        201:
          description: "创建用户组成功"
          schema:
            $ref: "#/definitions/CreateGroup"
        400:
          description: "创建用户组失败"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
      security:
        - userToken: []

  /api/management/groups/{id}:
    # 获取某个用户组
    get: 
      tags:
        - "用户组管理"
      summary: "获取某个用户组"
      parameters:
        - name: "id"
          in: path
          description: "用户组ID"
          required: true
          type: integer
      responses:
        200:
          description: "获取用户组列表成功"
          schema:
              $ref: "#/definitions/UserGroup"
        400:
          description: "获取用户组列表失败"
        404:
          description: "用户组没有找到"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
      security:
        - userToken: []
  
  /api/management/permissions/:
    # 获取权限列表
    get:
      tags:
        - "用户权限管理"
      summary:
        - "获取用户权限列表"
      responses:
        200:
          description: "获取用户权限列表成功"
          schema:
            $res: "#/definitions/Permission"
        400:
          description: "获取用户权限列表失败"
        403:
          $ref: "#/responses/Standard403ErrorResponse"
        500:
          $ref: "#/responses/Standard500ErrorResponse"

securityDefinitions:
  userToken:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  # 权限模型
  Permission:
    properties:
      id: 
        type: integer
      codename:
        type: string
      name: 
        type: string

  # 创建用户组模型
  CreateGroup:
    description: "创建用户组模型"
    properties:
      name:
        type: string
      permissions:
        type: array
        items:
          $ref: "#/definitions/Permission"

  User:
    properties:
      id: 
        type: integer
      email:
        type: string
      username:
        type: string
      verbose_name:
        type: string
      is_active: 
        type: boolean
      last_login:
        type: string
        format: date-time
      created: 
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      groups:
        type: array
        items:
          type: integer
      user_permissions:
          type: array
          items:
            type: integer

  UserGroup:
    properties:
      id: 
        type: integer
      name:
        type: string
      permissions:
        type: array
        items:
          type: integer

  CreateUserGroup:
    properties:
      id:
        type: integer
      name: 
        type: string

  # CreateUserGroups:
  #   type: array
  #     items:
  #       $ref: "#definitions/CreateUserGroup"

responses:
  Standard403ErrorResponse:
    description: "用户认证失败或没有该操作权限"
  Standard500ErrorResponse:
    description: "发生错误"

# parameters:
#   userToken:
#     name: "Authorization"
#     type: string
#     description: "用户认证信息（Token）"
#     in: "header"
#     default: "Token "
#     required: true